// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module gf_mult_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output gf_mult_reg_pkg::gf_mult_reg2hw_t reg2hw, // Write
  input  gf_mult_reg_pkg::gf_mult_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import gf_mult_reg_pkg::* ;

  localparam int AW = 5;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [7:0] op_a_wd;
  logic op_a_we;
  logic [7:0] op_b_wd;
  logic op_b_we;
  logic [7:0] result_qs;
  logic result_re;
  logic ctrl1_wd;
  logic ctrl1_we;
  logic ctrl2_wd;
  logic ctrl2_we;
  logic status_qs;
  logic status_re;

  // Register instances
  // R[op_a]: V(False)

  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_op_a (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (op_a_we),
    .wd     (op_a_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.op_a.q ),

    .qs     ()
  );


  // R[op_b]: V(False)

  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_op_b (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (op_b_we),
    .wd     (op_b_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.op_b.q ),

    .qs     ()
  );


  // R[result]: V(True)

  prim_subreg_ext #(
    .DW    (8)
  ) u_result (
    .re     (result_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.result.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (result_qs)
  );


  // R[ctrl1]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl1 (
    .re     (1'b0),
    .we     (ctrl1_we),
    .wd     (ctrl1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl1.qe),
    .q      (reg2hw.ctrl1.q ),
    .qs     ()
  );


  // R[ctrl2]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl2 (
    .re     (1'b0),
    .we     (ctrl2_we),
    .wd     (ctrl2_wd),
    .d      (hw2reg.ctrl2.d),
    .qre    (),
    .qe     (reg2hw.ctrl2.qe),
    .q      (reg2hw.ctrl2.q ),
    .qs     ()
  );


  // R[status]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_status (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == GF_MULT_OP_A_OFFSET);
    addr_hit[1] = (reg_addr == GF_MULT_OP_B_OFFSET);
    addr_hit[2] = (reg_addr == GF_MULT_RESULT_OFFSET);
    addr_hit[3] = (reg_addr == GF_MULT_CTRL1_OFFSET);
    addr_hit[4] = (reg_addr == GF_MULT_CTRL2_OFFSET);
    addr_hit[5] = (reg_addr == GF_MULT_STATUS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (GF_MULT_PERMIT[0] != (GF_MULT_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (GF_MULT_PERMIT[1] != (GF_MULT_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (GF_MULT_PERMIT[2] != (GF_MULT_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (GF_MULT_PERMIT[3] != (GF_MULT_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (GF_MULT_PERMIT[4] != (GF_MULT_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (GF_MULT_PERMIT[5] != (GF_MULT_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
  end

  assign op_a_we = addr_hit[0] & reg_we & ~wr_err;
  assign op_a_wd = reg_wdata[7:0];

  assign op_b_we = addr_hit[1] & reg_we & ~wr_err;
  assign op_b_wd = reg_wdata[7:0];

  assign result_re = addr_hit[2] && reg_re;

  assign ctrl1_we = addr_hit[3] & reg_we & ~wr_err;
  assign ctrl1_wd = reg_wdata[0];

  assign ctrl2_we = addr_hit[4] & reg_we & ~wr_err;
  assign ctrl2_wd = reg_wdata[0];

  assign status_re = addr_hit[5] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[7:0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[7:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[7:0] = result_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = status_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
