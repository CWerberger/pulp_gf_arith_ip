// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package gf_mult_reg_pkg;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [7:0]  q;
  } gf_mult_reg2hw_op_a_reg_t;

  typedef struct packed {
    logic [7:0]  q;
  } gf_mult_reg2hw_op_b_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } gf_mult_reg2hw_ctrl1_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } gf_mult_reg2hw_ctrl2_reg_t;


  typedef struct packed {
    logic [7:0]  d;
  } gf_mult_hw2reg_result_reg_t;

  typedef struct packed {
    logic        d;
  } gf_mult_hw2reg_ctrl2_reg_t;

  typedef struct packed {
    logic        d;
  } gf_mult_hw2reg_status_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    gf_mult_reg2hw_op_a_reg_t op_a; // [20:13]
    gf_mult_reg2hw_op_b_reg_t op_b; // [12:5]
    gf_mult_reg2hw_ctrl1_reg_t ctrl1; // [4:3]
    gf_mult_reg2hw_ctrl2_reg_t ctrl2; // [2:1]
  } gf_mult_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    gf_mult_hw2reg_result_reg_t result; // [10:11]
    gf_mult_hw2reg_ctrl2_reg_t ctrl2; // [10:9]
    gf_mult_hw2reg_status_reg_t status; // [8:9]
  } gf_mult_hw2reg_t;

  // Register Address
  parameter logic [4:0] GF_MULT_OP_A_OFFSET = 5'h 0;
  parameter logic [4:0] GF_MULT_OP_B_OFFSET = 5'h 4;
  parameter logic [4:0] GF_MULT_RESULT_OFFSET = 5'h 8;
  parameter logic [4:0] GF_MULT_CTRL1_OFFSET = 5'h c;
  parameter logic [4:0] GF_MULT_CTRL2_OFFSET = 5'h 10;
  parameter logic [4:0] GF_MULT_STATUS_OFFSET = 5'h 14;


  // Register Index
  typedef enum int {
    GF_MULT_OP_A,
    GF_MULT_OP_B,
    GF_MULT_RESULT,
    GF_MULT_CTRL1,
    GF_MULT_CTRL2,
    GF_MULT_STATUS
  } gf_mult_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] GF_MULT_PERMIT [6] = '{
    4'b 0001, // index[0] GF_MULT_OP_A
    4'b 0001, // index[1] GF_MULT_OP_B
    4'b 0001, // index[2] GF_MULT_RESULT
    4'b 0001, // index[3] GF_MULT_CTRL1
    4'b 0001, // index[4] GF_MULT_CTRL2
    4'b 0001  // index[5] GF_MULT_STATUS
  };
endpackage

